# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Eorzea

import flatbuffers

class WeatherMap(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWeatherMap(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WeatherMap()
        x.Init(buf, n + offset)
        return x

    # WeatherMap
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WeatherMap
    def Region(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # WeatherMap
    def Place(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # WeatherMap
    def Rate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .WeatherRate import WeatherRate
            obj = WeatherRate()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def WeatherMapStart(builder): builder.StartObject(3)
def WeatherMapAddRegion(builder, region): builder.PrependUint16Slot(0, region, 0)
def WeatherMapAddPlace(builder, place): builder.PrependUint16Slot(1, place, 0)
def WeatherMapAddRate(builder, rate): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rate), 0)
def WeatherMapEnd(builder): return builder.EndObject()
